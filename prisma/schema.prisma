generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId            BigInt      @id @unique
  name              String      @default("")
  username          String      @default("")
  amountEnergy      Int         @default(3)
  useEneryTimestamp String?     @db.VarChar(32)
  gameTime          Int         @default(60)
  score             Float       @default(0)
  skin              String      @default("default")
  userTasks         UserTask[]
  inviteCode        String      @unique @db.VarChar(32)
  refCode           String?     @db.VarChar(32)
  userBoosts        UserBoost[]
  userGames         UserGame[]
  userScores        UserScore[]
  createdAt         DateTime    @default(now())
}

model UserTask {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [userId])
  userId    BigInt
  task      Task    @relation(fields: [taskId], references: [id])
  taskId    Int
  completed Boolean @default(false)
}

model Task {
  id        Int        @id @default(autoincrement())
  title     String     @default("")
  bonus     Float        @default(0)
  link      String     @default("")
  userTasks UserTask[]
}

model UserBoost {
  id             Int     @id @default(autoincrement())
  user           User    @relation(fields: [userId], references: [userId])
  userId         BigInt
  boost          Boost   @relation(fields: [boostId], references: [id])
  boostId        Int
  level          Int     @default(0)
  availableCount Int     @default(1)
  useTimestamp   String? @db.VarChar(32)
}

enum BoostType {
  default
  daily
}

model Boost {
  id              Int         @id @default(autoincrement())
  title           String      @default("")
  slug            String      @unique @default("") @db.VarChar(64)
  description     String      @default("")
  type            BoostType   @default(default)
  improveTitle    String      @default("")
  allCount        Int         @default(1)
  userBoost       UserBoost[]
  levelPrice      Float       @default(0)
  maxLevel        Int         @default(0)
  canImproved     Boolean     @default(false)
  recoverySeconds Int         @default(0)
}

model UserGame {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [userId])
  userId    BigInt
  hash      String   @unique @db.VarChar(64)
  score     Float    @default(0)
  startTime String?  @db.VarChar(32)
  endTime   String?  @db.VarChar(32)
  createdAt DateTime @default(now())
}

enum TypeOfChange {
  increase
  descrease
}

model UserScore {
  id        Int          @id @default(autoincrement())
  user      User         @relation(fields: [userId], references: [userId])
  userId    BigInt
  count     Float
  type      TypeOfChange
  createdAt DateTime     @default(now())
}
